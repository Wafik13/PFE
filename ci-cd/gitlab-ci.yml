# GitLab CI/CD Pipeline for Industrial Intelligence Platform
# This pipeline builds, tests, and deploys microservices using GitOps with ArgoCD

stages:
  - validate
  - build
  - test
  - security
  - package
  - deploy-dev
  - deploy-staging
  - deploy-prod

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_TAG: $CI_COMMIT_SHA
  HELM_VERSION: "3.12.0"
  KUBECTL_VERSION: "1.28.0"
  ARGOCD_VERSION: "2.8.0"
  TRIVY_VERSION: "0.45.0"
  SONAR_SCANNER_VERSION: "4.8.0"

# Global before script
before_script:
  - echo "Pipeline started for commit $CI_COMMIT_SHA"
  - echo "Branch: $CI_COMMIT_REF_NAME"
  - echo "Registry: $REGISTRY"

# Validate stage
validate-helm:
  stage: validate
  image: alpine/helm:$HELM_VERSION
  script:
    - helm lint helm-charts/iip-platform/
    - helm template iip-platform helm-charts/iip-platform/ --values helm-charts/iip-platform/values.yaml > /tmp/rendered.yaml
    - echo "Helm chart validation successful"
  artifacts:
    paths:
      - /tmp/rendered.yaml
    expire_in: 1 hour
  rules:
    - changes:
        - helm-charts/**/*
        - k8s-manifests/**/*

validate-k8s:
  stage: validate
  image: bitnami/kubectl:$KUBECTL_VERSION
  script:
    - kubectl --dry-run=client apply -f k8s-manifests/ --recursive
    - echo "Kubernetes manifests validation successful"
  rules:
    - changes:
        - k8s-manifests/**/*

validate-yaml:
  stage: validate
  image: cytopia/yamllint:latest
  script:
    - yamllint -d relaxed helm-charts/ k8s-manifests/ ci-cd/
    - echo "YAML syntax validation successful"
  rules:
    - changes:
        - helm-charts/**/*
        - k8s-manifests/**/*
        - ci-cd/**/*

# Build stage
build-scada-service:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    SERVICE_NAME: scada-service
    DOCKERFILE_PATH: microservices/scada-service/Dockerfile
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest \
        -f $DOCKERFILE_PATH \
        microservices/scada-service/
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest
  rules:
    - changes:
        - microservices/scada-service/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

build-analytics-service:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    SERVICE_NAME: analytics-service
    DOCKERFILE_PATH: microservices/analytics-service/Dockerfile
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest \
        -f $DOCKERFILE_PATH \
        microservices/analytics-service/
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest
  rules:
    - changes:
        - microservices/analytics-service/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

build-ml-inference:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    SERVICE_NAME: ml-inference
    DOCKERFILE_PATH: microservices/ml-inference/Dockerfile
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest \
        -f $DOCKERFILE_PATH \
        microservices/ml-inference/
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest
  rules:
    - changes:
        - microservices/ml-inference/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

build-frontend:
  stage: build
  image: node:18-alpine
  variables:
    SERVICE_NAME: frontend
  script:
    - cd frontend/
    - npm ci --only=production
    - npm run build
    - echo "Frontend build completed"
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour
  rules:
    - changes:
        - frontend/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

build-frontend-docker:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    SERVICE_NAME: frontend
    DOCKERFILE_PATH: frontend/Dockerfile
  dependencies:
    - build-frontend
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG \
        -t $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest \
        -f $DOCKERFILE_PATH \
        frontend/
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:$IMAGE_TAG
    - docker push $REGISTRY/$CI_PROJECT_PATH/$SERVICE_NAME:latest
  rules:
    - changes:
        - frontend/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

# Test stage
test-scada-service:
  stage: test
  image: python:3.11-slim
  variables:
    SERVICE_PATH: microservices/scada-service
  script:
    - cd $SERVICE_PATH
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
    - pytest tests/ --cov=app --cov-report=xml --cov-report=term
    - echo "SCADA service tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $SERVICE_PATH/coverage.xml
    paths:
      - $SERVICE_PATH/coverage.xml
    expire_in: 1 week
  rules:
    - changes:
        - microservices/scada-service/**/*

test-analytics-service:
  stage: test
  image: python:3.11-slim
  variables:
    SERVICE_PATH: microservices/analytics-service
  script:
    - cd $SERVICE_PATH
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
    - pytest tests/ --cov=app --cov-report=xml --cov-report=term
    - echo "Analytics service tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $SERVICE_PATH/coverage.xml
    paths:
      - $SERVICE_PATH/coverage.xml
    expire_in: 1 week
  rules:
    - changes:
        - microservices/analytics-service/**/*

test-ml-inference:
  stage: test
  image: python:3.11-slim
  variables:
    SERVICE_PATH: microservices/ml-inference
  script:
    - cd $SERVICE_PATH
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
    - pytest tests/ --cov=app --cov-report=xml --cov-report=term
    - echo "ML inference service tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $SERVICE_PATH/coverage.xml
    paths:
      - $SERVICE_PATH/coverage.xml
    expire_in: 1 week
  rules:
    - changes:
        - microservices/ml-inference/**/*

test-frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend/
    - npm ci
    - npm run test:coverage
    - echo "Frontend tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    paths:
      - frontend/coverage/
    expire_in: 1 week
  rules:
    - changes:
        - frontend/**/*

# Security stage
security-scan-images:
  stage: security
  image: aquasec/trivy:$TRIVY_VERSION
  script:
    - |
      for service in scada-service analytics-service ml-inference frontend; do
        echo "Scanning $service image..."
        trivy image --exit-code 0 --severity HIGH,CRITICAL --format json --output trivy-$service.json $REGISTRY/$CI_PROJECT_PATH/$service:$IMAGE_TAG
        trivy image --exit-code 1 --severity CRITICAL $REGISTRY/$CI_PROJECT_PATH/$service:$IMAGE_TAG
      done
  artifacts:
    reports:
      container_scanning:
        - trivy-*.json
    paths:
      - trivy-*.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

security-scan-code:
  stage: security
  image: sonarqube/sonar-scanner-cli:$SONAR_SCANNER_VERSION
  script:
    - |
      sonar-scanner \
        -Dsonar.projectKey=$CI_PROJECT_NAME \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/build/**,**/*.test.js,**/*.spec.js"
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG
  only:
    variables:
      - $SONAR_HOST_URL
      - $SONAR_TOKEN

# Package stage
package-helm:
  stage: package
  image: alpine/helm:$HELM_VERSION
  script:
    - helm package helm-charts/iip-platform/ --version $CI_COMMIT_TAG --app-version $CI_COMMIT_TAG
    - |
      if [ -n "$HELM_REGISTRY" ]; then
        echo $HELM_REGISTRY_PASSWORD | helm registry login $HELM_REGISTRY -u $HELM_REGISTRY_USER --password-stdin
        helm push iip-platform-$CI_COMMIT_TAG.tgz oci://$HELM_REGISTRY
      fi
  artifacts:
    paths:
      - iip-platform-*.tgz
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

# Deploy stages
deploy-dev:
  stage: deploy-dev
  image: argoproj/argocd:v$ARGOCD_VERSION
  environment:
    name: development
    url: https://dev.iip.company.com
  script:
    - |
      argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      
      # Update image tags in dev values
      argocd app set iip-platform-dev \
        --parameter scada.image.tag=$IMAGE_TAG \
        --parameter analytics.image.tag=$IMAGE_TAG \
        --parameter mlInference.image.tag=$IMAGE_TAG \
        --parameter frontend.image.tag=$IMAGE_TAG
      
      # Sync the application
      argocd app sync iip-platform-dev --prune
      
      # Wait for sync to complete
      argocd app wait iip-platform-dev --timeout 600
      
      echo "Deployment to development environment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

deploy-staging:
  stage: deploy-staging
  image: argoproj/argocd:v$ARGOCD_VERSION
  environment:
    name: staging
    url: https://staging.iip.company.com
  script:
    - |
      argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      
      # Update image tags in staging values
      argocd app set iip-platform-staging \
        --parameter scada.image.tag=$IMAGE_TAG \
        --parameter analytics.image.tag=$IMAGE_TAG \
        --parameter mlInference.image.tag=$IMAGE_TAG \
        --parameter frontend.image.tag=$IMAGE_TAG
      
      # Sync the application
      argocd app sync iip-platform-staging --prune
      
      # Wait for sync to complete
      argocd app wait iip-platform-staging --timeout 600
      
      echo "Deployment to staging environment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

deploy-prod:
  stage: deploy-prod
  image: argoproj/argocd:v$ARGOCD_VERSION
  environment:
    name: production
    url: https://iip.company.com
  script:
    - |
      argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      
      # Update image tags in production values
      argocd app set iip-platform-prod \
        --parameter scada.image.tag=$CI_COMMIT_TAG \
        --parameter analytics.image.tag=$CI_COMMIT_TAG \
        --parameter mlInference.image.tag=$CI_COMMIT_TAG \
        --parameter frontend.image.tag=$CI_COMMIT_TAG
      
      # Sync the application
      argocd app sync iip-platform-prod --prune
      
      # Wait for sync to complete
      argocd app wait iip-platform-prod --timeout 900
      
      echo "Deployment to production environment completed"
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Cleanup job
cleanup-registry:
  stage: deploy-prod
  image: alpine:latest
  script:
    - |
      echo "Cleaning up old images from registry..."
      # This would typically use registry API to clean up old images
      # Implementation depends on your registry (GitLab, Harbor, etc.)
      echo "Registry cleanup completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
  allow_failure: true

# Notification job
notify-teams:
  stage: deploy-prod
  image: alpine:latest
  script:
    - |
      if [ -n "$TEAMS_WEBHOOK_URL" ]; then
        apk add --no-cache curl
        curl -H "Content-Type: application/json" -d '{
          "@type": "MessageCard",
          "@context": "http://schema.org/extensions",
          "summary": "IIP Platform Deployment",
          "themeColor": "0078D4",
          "sections": [{
            "activityTitle": "IIP Platform Deployed",
            "activitySubtitle": "Pipeline: '${CI_PIPELINE_ID}'",
            "facts": [
              {"name": "Environment", "value": "'${CI_ENVIRONMENT_NAME}'"},
              {"name": "Commit", "value": "'${CI_COMMIT_SHA}'"},
              {"name": "Branch/Tag", "value": "'${CI_COMMIT_REF_NAME}'"},
              {"name": "Author", "value": "'${CI_COMMIT_AUTHOR}'"}
            ]
          }]
        }' $TEAMS_WEBHOOK_URL
      fi
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
  when: on_success
  allow_failure: true