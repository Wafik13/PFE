{{- if .Values.mlops.feast.enabled }}
# Feast Feature Store
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feast-feature-server
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: feast-feature-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: feature-store
    app.kubernetes.io/part-of: iip-platform
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: feast-feature-server
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: feast-feature-server
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: feature-store
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: iip-mlops-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: feast-server
        image: "{{ .Values.mlops.feast.image.repository }}:{{ .Values.mlops.feast.image.tag }}"
        imagePullPolicy: Always
        command: ["feast", "serve"]
        ports:
        - name: http
          containerPort: 6566
          protocol: TCP
        env:
        - name: FEAST_CORE_URL
          value: "feast-core.iip-mlops.svc.cluster.local:6565"
        - name: FEAST_ONLINE_STORE_TYPE
          value: "redis"
        - name: FEAST_ONLINE_STORE_CONNECTION_STRING
          value: "redis://redis-master.iip-infrastructure.svc.cluster.local:6379"
        - name: FEAST_OFFLINE_STORE_TYPE
          value: "file"
        - name: FEAST_OFFLINE_STORE_PATH
          value: "/feast/data"
        - name: FEAST_REGISTRY_PATH
          value: "/feast/registry/registry.db"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.mlops.feast.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: feast-data
          mountPath: /feast/data
        - name: feast-registry
          mountPath: /feast/registry
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: feast-data
        persistentVolumeClaim:
          claimName: feast-data-pvc
      - name: feast-registry
        persistentVolumeClaim:
          claimName: feast-registry-pvc
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: feast-feature-server
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: feast-feature-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: feature-store
spec:
  type: ClusterIP
  ports:
  - port: 6566
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: feast-feature-server
    app.kubernetes.io/instance: {{ .Release.Name }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: feast-data-pvc
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: feast-feature-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: feature-store
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.storageClass }}
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: feast-registry-pvc
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: feast-feature-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: feature-store
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.storageClass }}
  resources:
    requests:
      storage: 10Gi
{{- end }}

{{- if .Values.mlops.mlflow.enabled }}
---
# MLflow Model Registry
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-server
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: model-registry
    app.kubernetes.io/part-of: iip-platform
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mlflow-server
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mlflow-server
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: model-registry
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: iip-mlops-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      initContainers:
      - name: install-mlflow
        image: "{{ .Values.mlops.mlflow.image.repository }}:{{ .Values.mlops.mlflow.image.tag }}"
        command: ["pip", "install", "mlflow[extras]==2.8.1", "psycopg2-binary", "boto3"]
        volumeMounts:
        - name: mlflow-libs
          mountPath: /usr/local/lib/python3.9/site-packages
      containers:
      - name: mlflow-server
        image: "{{ .Values.mlops.mlflow.image.repository }}:{{ .Values.mlops.mlflow.image.tag }}"
        command:
        - mlflow
        - server
        - --host
        - "0.0.0.0"
        - --port
        - "5000"
        - --backend-store-uri
        - "postgresql://postgres:$(POSTGRES_PASSWORD)@postgresql.iip-infrastructure.svc.cluster.local:5432/mlflow"
        - --default-artifact-root
        - "s3://iip-models/mlflow-artifacts"
        - --serve-artifacts
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: postgres-password
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: secret-key
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://minio.iip-infrastructure.svc.cluster.local:9000"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          {{- toYaml .Values.mlops.mlflow.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: mlflow-libs
          mountPath: /usr/local/lib/python3.9/site-packages
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: mlflow-libs
        emptyDir: {}
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-server
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: model-registry
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: mlflow-server
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{- if .Values.mlops.argoWorkflows.enabled }}
---
# Argo Workflows Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-controller
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: workflow-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/part-of: iip-platform
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: workflow-controller
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: workflow-controller
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: workflow-controller
    spec:
      serviceAccountName: iip-mlops-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: workflow-controller
        image: "quay.io/argoproj/workflow-controller:v3.4.4"
        command:
        - workflow-controller
        args:
        - --configmap
        - workflow-controller-configmap
        - --executor-image
        - quay.io/argoproj/argoexec:v3.4.4
        env:
        - name: LEADER_ELECTION_IDENTITY
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        livenessProbe:
          httpGet:
            path: /healthz
            port: 6060
          initialDelaySeconds: 90
          periodSeconds: 60
          timeoutSeconds: 30
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 6060
          name: healthz
        resources:
          {{- toYaml .Values.mlops.argoWorkflows.controller.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: workflow-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: workflow-controller
data:
  config: |
    instanceID: iip-mlops
    namespace: iip-mlops
    parallelism: 10
    resourceRateLimit:
      limit: 10
      burst: 1
    persistence:
      connectionPool:
        maxIdleConns: 2
        maxOpenConns: 8
      nodeStatusOffLoad: true
      archive: true
      postgresql:
        host: postgresql.iip-infrastructure.svc.cluster.local
        port: 5432
        database: argo_workflows
        tableName: argo_workflows
        userNameSecret:
          name: argo-postgres-config
          key: username
        passwordSecret:
          name: argo-postgres-config
          key: password
    artifactRepository:
      s3:
        bucket: iip-models
        keyFormat: "workflows/{{workflow.creationTimestamp.Y}}/{{workflow.creationTimestamp.m}}/{{workflow.creationTimestamp.d}}/{{workflow.name}}/{{pod.name}}"
        endpoint: minio.iip-infrastructure.svc.cluster.local:9000
        insecure: true
        accessKeySecret:
          name: minio-credentials
          key: access-key
        secretKeySecret:
          name: minio-credentials
          key: secret-key
    workflowDefaults:
      spec:
        serviceAccountName: iip-mlops-operator
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        nodeSelector:
          node-type: compute
        tolerations:
        - key: "node-type"
          operator: "Equal"
          value: "compute"
          effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: workflow-controller-metrics
  namespace: iip-mlops
  labels:
    app.kubernetes.io/name: workflow-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: workflow-controller
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: workflow-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}